{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.5e6f27b4f0cf2058e3d1.hot-update.js","sources":["webpack:///./pages/components/eventSlider.js"],"sourcesContent":["import React from 'react';\r\nimport styles from '../scss/eventSlider.scss';\r\nimport Event from './event';\r\nimport { gql } from 'apollo-boost';\r\nimport { graphql } from 'react-apollo';\r\nconst ellipsis = require('text-ellipsis');\r\n\r\n// Get all everts\r\nconst getAllEvents = gql`\r\n  {\r\n    posts(where: { categoryId: 4 }) {\r\n      edges {\r\n        node {\r\n          date\r\n          title\r\n          content\r\n          featuredImage {\r\n            sourceUrl\r\n          }\r\n          author {\r\n            name\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass EventSlider extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { events: null };\r\n  }\r\n  componentDidMount() {\r\n    // Load events into local state\r\n    fetch('https://www.whalescout.org/wp-json/wp/v2/posts')\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ data }));\r\n  }\r\n  // Handle required fields\r\n  isImage(event) {\r\n    if (event.node.featuredImage)\r\n      return ellipsis(event.node.featuredImage.sourceUrl);\r\n    else return '../../static/images/ws_home_header.svg';\r\n  }\r\n  isDescription(event) {\r\n    if (event.node.content) return ellipsis(event.node.content, 150);\r\n    else return <p>Sorry, no description is available.</p>;\r\n  }\r\n  isTitle(event) {\r\n    if (event.node.title) return `<h4>${event.node.title}</h4>`;\r\n    else return `'<h4>Helpin' Out Event!</h4>'`;\r\n  }\r\n  isDate(event) {\r\n    if (event.node.date) return event.node.date;\r\n    else return 'Coming Soon!';\r\n  }\r\n  render() {\r\n    // All events, shortened\r\n    const events = this.props.data.posts.edges;\r\n    return (\r\n      <div className={styles.event_slider}>\r\n        {/* // Display all upcoming events and remove old ones */}\r\n        {events.map(event => {\r\n          return (\r\n            <Event\r\n              date={this.isDate(event)}\r\n              title={this.isTitle(event)}\r\n              description={this.isDescription(event)}\r\n              image={this.isImage(event)}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default graphql(getAllEvents)(EventSlider);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAmBA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AAFA;AAGA;AACA;;;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;AACA;AACA;AAGA;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AACA;AACA;AAEA;;;AACA;AACA;AAEA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAGA;;;;AA/CA;AACA;AAiDA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}